---
linters-settings:
  govet:
    #FIXME: Disabled for now
    check-shadowing: false #todo
  revive:
    min-confidence: 0
  gofmt:
   # simplify code
   simplify: true
  gocyclo:
    min-complexity: 20
  maligned:
    suggest-new: true
  dupl:
    threshold: 100
  goconst:
    min-len: 2
    min-occurrences: 3
  depguard:
    list-type: blacklist
    packages:
  misspell:
    locale: US
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    tab-width: 1
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unparam:
    # call graph construction algorithm (cha, rta). In general, use cha for libraries,
    # and rta for programs with main packages. Default is cha.
    algo: cha

    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  gocritic:
    enabled-tags:
      - performance
      - experimental
      - style
    disabled-checks:
      # FIXME, effective-go
      - commentFormatting # https://github.com/go-critic/go-critic/issues/755
      - commentedOutCode
      - commentedOutImport
      - paramTypeCombine
      - ifElseChain
      - unnamedResult
      #- exitAfterDefer #todo:  #must
      #- appendCombine
      #- wrapperFunc
      #- typeUnparen
      #- hugeParam #todo: #must
      #- ptrToRefParam #todo:  #must

linters:
  enable-all: true
  disable:
    # FIXME: Fix if you can
    - maligned
    - gochecknoglobals #todo see if we can add it
    - gomoddirectives #todo remove after IDUN-14658 is resolved
    - wsl #conflicts with gofumpt which I like much more
    - gochecknoinits
    - unparam
    - errcheck
    - gosec  #todo #must
    - stylecheck
    - misspell
    - godot
    - gci
    - exhaustivestruct
    - nlreturn
    - wrapcheck
    #- scopelint
    #- prealloc
    #- goconst
    #- unconvert

run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 2m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags:
   - adp-playground
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  #  Dummy stuff, fill if we want to skip
  skip-dirs:
    - src/external_libs
    - autogenerated_by_my_lib
    - static_modules
    - zip-validation

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - ".*\\.my\\.go$"
    - lib/bad.go


  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #modules-download-mode: readonly|release|vendor
  modules-download-mode: vendor


# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # FIXME: golint exclusion pattern, Try to fix them
  exclude:
    #- ".* can be `fmt.Stringer" #todo
    #- "should have a package comment"
    #- "exported \\w+ (\\S*['.]*)([a-zA-Z'.*]*) should have comment"
    #- "don't use (ALL_CAPS|underscores) in Go names"
    #- "comment on exported (type|const|method|function) .* should be of the form"
    #- "struct field \\w+ should be"
    #- "(func|var|method|type|const|parameter) \\w+ should be \\w+"
    #- "(type|func) name will be used as"
    #- "receiver name \\w+ should be consistent" # Unable to deduce receiver for ctypes, or create a alias type?
    #- "if block ends with a return"
    #- "error strings should not be capitalized or end with"
    #- "error var \\w+ should have name of"
    #- "should replace \\w+" #todo


  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: HEAD~1
  new-from-rev:

  # Show only new issues created in git patch with set file path.
  new-from-patch:

# golangci.com configuration
# https://github.com/golangci/golangci/wiki/Configuration
service:
  golangci-lint-version: 1.17.1 # use fixed version to not introduce new linters unexpectedly
  prepare:
    - echo "here I can run custom commands, but no preparation needed"
